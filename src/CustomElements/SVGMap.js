import { Div, Img } from "../DOM/Elements";

// needed for ES5 generated by webpack
import "!../../assets/js/custom-elements-es5-adapter.js";

// ES6 class that extends a native DOM class
class SVGMap extends HTMLElement {
    constructor() {
        super();
        //this._countryCode = null;

        // let shadowRoot = this.attachShadow({ mode: 'open' });
        // shadowRoot.innerHTML = `
        //     <style>:host { ... }</style> <!-- look ma, scoped styles -->
        //     <b>I'm in shadow dom!</b>
        //     <slot></slot>
        // `;
    }

    static get observedAttributes() { return ["country"]; }

    /**
     * An attribute was added, removed, updated, or replaced. 
     * Also called for initial values when an element is created by the 
     * parser, or upgraded. Note: only attributes listed in the 
     * observedAttributes property will receive this callback.
     */
    attributeChangedCallback(name, oldValue, newValue) {
        // name will always be "country" due to observedAttributes
        this._countryCode = newValue;
        this._updateRendering();
    }

    /**
    Called every time the element is inserted into the DOM. 
    Useful for running setup code, such as fetching resources or rendering. 
    Generally, you should try to delay work until this time.
    */
    connectedCallback() {
        if (this.ownerDocument.defaultView) {
            var shadow = this.attachShadow({ mode: 'open' });

            shadow.appendChild(Img({
                src: "Eberswalder5.svg", width: 600, height: 400
            }))
        }
    }

    /*
    Called every time the element is removed from the DOM. 
    Useful for running clean up code (removing event listeners, etc.).
    */
    disconnectedCallback() {

    }

    /**
     * The custom element has been moved into a new document (e.g. someone 
     * called document.adoptNode(el)).
     */
    adoptedCallback() {

    }

    get country() {
        return this._countryCode;
    }
    set country(v) {
        this.setAttribute("country", v);
    }

}

// register the custom element
window.customElements.define("svg-map", SVGMap); // must contain a dash!

const defaults = {
    country: "DE",
};

const _Create = (args) => {
    if (!(args instanceof Object)) {
        args = {};
    }
    Object.assign(args, defaults);

    const self = new SVGMap();
    self.Type = "SVGMap";

    return self;
};

export default _Create;

