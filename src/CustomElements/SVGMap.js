import { Div, Img } from "../DOM/Elements";

// needed for ES5 generated by webpack
import "!../../lib/webcomponentsjs/custom-elements-es5-adapter.js";
import "!../../lib/webcomponentsjs/webcomponents-lite";

import styles from "./SVGMap.less";


// ES6 class that extends a native DOM class
class SVGMap extends HTMLElement {
    constructor(args) {
        super(); // to be called first, initializes HTMLElement
        this._src = args.src;

        // let shadowRoot = this.attachShadow({ mode: 'open' });
        // shadowRoot.innerHTML = `
        //     <style>:host { ... }</style> <!-- look ma, scoped styles -->
        //     <b>I'm in shadow dom!</b>
        //     <slot></slot>
        // `;
    }

    static get observedAttributes() { return ["src"]; }

    /**
     * An attribute was added, removed, updated, or replaced. 
     * Also called for initial values when an element is created by the 
     * parser, or upgraded. Note: only attributes listed in the 
     * observedAttributes property will receive this callback.
     */
    attributeChangedCallback(name, oldValue, newValue) {
        this._src = newValue;
        this._update();
    }

    /**
      * Called every time the element is inserted into the DOM. 
      * Useful for running setup code, such as fetching resources or rendering. 
      * Generally, you should try to delay work until this time.
      */
    connectedCallback() {
        if (this.ownerDocument.defaultView) {
            var shadow = this.attachShadow({ mode: 'open' });

            shadow.appendChild(Img({
                src: this._src, width: 600, height: 400
            }))
        }
    }

    _update() {
        // TODO: change src of the image
    }

    /**
     * Called every time the element is removed from the DOM. 
     * Useful for running clean up code (removing event listeners, etc.).
     */
    disconnectedCallback() {

    }

    /**
     * The custom element has been moved into a new document (e.g. someone 
     * called document.adoptNode(el)).
     */
    adoptedCallback() {

    }

    get src() {
        return this._src;
    }
    set src(v) {
        this.setAttribute("src", v);
    }

}

// register the custom element
window.customElements.define("svg-map", SVGMap); // must contain a dash!

const defaults = {
    country: "DE",
};

const _Create = (args) => {
    if (!(args instanceof Object)) {
        args = {};
    }
    Object.assign(args, defaults);

    const self = new SVGMap(args);
    self.Type = "SVGMap";

    return self;
};

export default _Create;

